from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from translator.translations import translate 
from aiogram.types import InlineKeyboardButton
import database.requests as db
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup






def lang_inline():
    chooseLang = InlineKeyboardBuilder()
    chooseLang.button(text='–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ üá∑üá∫', callback_data='ru')
    chooseLang.button(text="O'zbek tili üá∫üáø", callback_data='uz')

    chooseLang.adjust(2)
    return chooseLang.as_markup()

async def admin_contact():
    chooseLang = InlineKeyboardBuilder()
    chooseLang.button(text='Admin/–ê–¥–º–∏–Ω', url="https://t.me/SparkleSteppmanager")

    return chooseLang.as_markup()



async def create_keyboard(lang, counter: int, product_id: int):
    inline_keyboard_builder = InlineKeyboardBuilder()
    
    inline_keyboard_builder.button(text="-", callback_data=f"decrement_{product_id}")
    inline_keyboard_builder.button(text=f"{counter}", callback_data="counter")
    inline_keyboard_builder.button(text="+", callback_data=f"increment_{product_id}")
    
    add_to_cart_text = translate("üì• –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", lang)
    inline_keyboard_builder.button(text=add_to_cart_text, callback_data=f"add_to_cart_{product_id}")
    
    return inline_keyboard_builder.adjust(3, 1).as_markup()

async def delete_cart_items(lang, user_id):

    all_items = await db.get_cart_items(user_id)
    

    item_quantities = {}
    for item in all_items:
        if item.itemId in item_quantities:
            item_quantities[item.itemId]['quantity'] += 1
        else:
            item_quantities[item.itemId] = {
                'name': item.itemName,
                'quantity': 1
            }

    items_keyboard = InlineKeyboardBuilder()

    items_keyboard.row(
        InlineKeyboardButton(text=translate("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", lang), callback_data="back"),
        InlineKeyboardButton(text=translate("üöñ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", lang), callback_data="checkout")
    )

    items_keyboard.row(
        InlineKeyboardButton(text=translate("üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", lang), callback_data="emptybasket")
    )

    for item_id, data in item_quantities.items():
        item_name_translated = translate(data['name'], lang)
        button_text = f"‚ùå {item_name_translated}"
        items_keyboard.row(
            InlineKeyboardButton(text=button_text, callback_data=f"delete_cart_{item_id}")
        )

    return items_keyboard.as_markup()



async def finish_or_not(lang: str) -> InlineKeyboardMarkup:

    finish_button = InlineKeyboardButton(text=translate("–î–∞ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚úÖ", lang), callback_data="finish")
    cancel_button = InlineKeyboardButton(text=translate("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", lang), callback_data="back")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [finish_button],
        [cancel_button]
    ])
    
    return keyboard

async def isLocationTrue(lang: str) -> InlineKeyboardMarkup:

    yes_button = InlineKeyboardButton(text=translate("‚úÖ –î–∞", lang), callback_data="yes")
    no_button = InlineKeyboardButton(text=translate("‚ùå –ù–µ—Ç", lang), callback_data="no")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [yes_button],
        [no_button]
    ])
    
    return keyboard

async def finish_or_not(lang: str) -> InlineKeyboardMarkup:

    yes_button = InlineKeyboardButton(text=translate("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", lang), callback_data="confirm")
    no_button = InlineKeyboardButton(text=translate("‚ùå –û—Ç–º–µ–Ω–∞", lang), callback_data="noconfirm")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [yes_button],
        [no_button]
    ])
    
    return keyboard




async def cardOrCash(lang: str) -> InlineKeyboardMarkup:

    yes_button = InlineKeyboardButton(text=translate("üí≥ –ö–∞—Ä—Ç–∞", lang), callback_data="card")
    no_button = InlineKeyboardButton(text=translate("üíµ –ù–∞–ª–∏—á–Ω—ã–π", lang), callback_data="cash")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [yes_button],
        [no_button]
    ])
    
    return keyboard

async def promo_finish_or_not(lang: str) -> InlineKeyboardMarkup:

    ok_button = InlineKeyboardButton(text=translate("‚úâÔ∏è –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", lang), callback_data="promo")
    yes_button = InlineKeyboardButton(text=translate("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", lang), callback_data="confirm")
    no_button = InlineKeyboardButton(text=translate("‚ùå –û—Ç–º–µ–Ω–∞", lang), callback_data="noconfirm")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [ok_button],
        [yes_button],
        [no_button],
    ])
    
    return keyboard

async def review(lang: str) -> InlineKeyboardMarkup:

    yes_button = InlineKeyboardButton(text=translate('‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', lang), callback_data="review")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [yes_button],
    ])
    
    return keyboard


async def get_callback_btns(
    btns: dict[str, str],
    sizes: tuple[int] = (2,)):

    keyboard = InlineKeyboardBuilder()

    for text, data in btns.items():
        
        keyboard.add(InlineKeyboardButton(text=text, callback_data=data))

    return keyboard.adjust(*sizes).as_markup()
