from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, or_f
import keyboards.reply.admin_key as ke
from settings import ADMINS, ADMIN_CHAT_ID
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import database.admin_requests as da
from database import requests as rq
import keyboards.inline.buttons as il
from translator.translations import translate, item_translations


routerAD = Router()
routerAD.message.filter()

class AddProduct(StatesGroup):
    name = State()
    description = State()
    price = State()
    quantity = State()
    image = State()
    name_uz = State()
    description_uz = State()
    product_for_change = None

class PromoCodeStates(StatesGroup):
    waiting_for_promotext = State()
    waiting_for_activations = State()
    waiting_for_percentage = State()
    waiting_for_promo_id = State()

class DoneOrderStates(StatesGroup):
    waiting_for_order_ids = State()

class CancelOrderStates(StatesGroup):
    waiting_for_order_ids = State()


async def is_admin(message: Message):
    return str(message.from_user.id) in ADMINS

async def allItemNamesRu():
    all_items = await rq.get_items()
    return [item.ItemName for item in all_items]

async def allItemNamesUz():
    all_itemsUz = await rq.get_items()
    return [itemUz.ItemNameUz for itemUz in all_itemsUz]

@routerAD.message(Command('cancel'), is_admin)
async def cancelAddItem(message: Message, state: FSMContext):
    try:
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä", reply_markup=ke.admin_main_key())
    except Exception as e:
        await message.answer("–ù–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\n\nn–û–±—Ä–∞—Ç–∏—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ—Ä—É", reply_markup=ke.admin_main_key())


@routerAD.message(Command('done'), is_admin)
async def start_done_command(message: types.Message, state: FSMContext):

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
    await state.set_state(DoneOrderStates.waiting_for_order_ids)


@routerAD.message(DoneOrderStates.waiting_for_order_ids)
async def process_order_ids(message: types.Message, state: FSMContext):

    user_message = message.text

    try:
        order_ids = [int(order_id) for order_id in user_message.split()]

        user_orders = await da.get_user_id_by_order_id(order_ids)

        if not user_orders:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID –∑–∞–∫–∞–∑–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ.")
            await state.clear()
            return

        for user_id, user_order_ids in user_orders.items():
            completed_orders = await da.get_completed_orders(user_order_ids)

            if completed_orders:
                await message.answer(f"–ó–∞–∫–∞–∑—ã —Å ID {', '.join(map(str, completed_orders))} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
                user_order_ids = [oid for oid in user_order_ids if oid not in completed_orders]

            if not user_order_ids:
                continue

            success, invalid_orders = await da.update_order_status_by_ids(user_order_ids)

            if success:
                lang = await rq.get_lang(user_id)
                await message.bot.send_message(
                    chat_id=user_id,
                    text=translate("–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ –ø—Ä–æ–¥—É–∫—Ç–µ!", lang),
                    reply_markup=await il.review(lang)
                )
                await message.answer(f"–ó–∞–∫–∞–∑—ã {', '.join(map(str, user_order_ids))} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
                await message.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"–ó–∞–∫–∞–∑—ã {', '.join(map(str, user_order_ids))} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω(—ã).")

            else:
                await message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID –∑–∞–∫–∞–∑–æ–≤: {', '.join(map(str, invalid_orders))}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ.")
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–∞–º–∏.")
    
    await state.clear()


@routerAD.message(Command('delete_all_orders'), is_admin)
async def cancelAddItem(message: Message):
    await da.delete_all_orders()
    await message.answer("–í—Å–µ –æ—Ä–¥–µ—Ä—ã —É–¥–∞–ª–µ–Ω")



routerAD.message(Command('cancel_order'), is_admin)
async def start_cancel_command(message: types.Message, state: FSMContext):

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
    await state.set_state(CancelOrderStates.waiting_for_order_ids)


@routerAD.message(CancelOrderStates.waiting_for_order_ids)
async def process_cancel_order_ids(message: types.Message, state: FSMContext):

    user_message = message.text

    try:
        order_ids = [int(order_id) for order_id in user_message.split()]

        user_orders = await da.get_user_id_by_order_id(order_ids)

        if not user_orders:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID –∑–∞–∫–∞–∑–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ.")
            await state.clear()
            return

        for user_id, user_order_ids in user_orders.items():
            success, invalid_orders = await da.OrderDeleted(user_order_ids)

            if success:
                await message.bot.send_message(
                    chat_id=user_id,
                    text="–í–∞—à–∏ –∑–∞–∫–∞–∑—ã –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
                await message.answer(f"–ó–∞–∫–∞–∑—ã {', '.join(map(str, user_order_ids))} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω—ã, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            else:
                await message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID –∑–∞–∫–∞–∑–æ–≤: {', '.join(map(str, invalid_orders))}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ.")
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–∞–º–∏.")
    
    await state.clear()

@routerAD.message(Command("active_orders_id"))
async def send_active_orders(message: Message):
    active_orders = await da.get_all_active_orders()
    
    if not active_orders:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    # Grouping orders by userId
    orders_by_user = {}
    
    for order in active_orders:
        user_id = order.userId
        if user_id not in orders_by_user:
            orders_by_user[user_id] = []
        orders_by_user[user_id].append(order.orderId)
    
    orders_message = []
    
    # Formatting the message to include all order IDs for each user on the same line
    for user_id, order_ids in orders_by_user.items():
        order_ids_str = ", ".join([f"<code>#{order_id}</code>" for order_id in order_ids])
        order_info = f"‚Ä¢ <b>ID –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:</b> {order_ids_str}"
        orders_message.append(order_info)

    final_message = "\n\n".join(orders_message)
    
    await message.answer(final_message)



@routerAD.message(Command('deletepromo'), is_admin)
async def start_deleting_promo(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–º–æ–∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(PromoCodeStates.waiting_for_promo_id)


@routerAD.message(PromoCodeStates.waiting_for_promo_id)
async def handle_promo_id_for_deletion(message: types.Message, state: FSMContext):
    promo_id = message.text
    
    if not promo_id.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        return

    promo_id = int(promo_id)

    promo_code = await da.get_promo_code_by_id(promo_id)
    
    if not promo_code:
        await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ —Å ID <code>{promo_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await da.delete_promo_code(promo_id)

    await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ —Å ID <code>{promo_id}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    await state.clear()


@routerAD.message(Command('allpromo'), is_admin)
async def show_all_promos(message: types.Message, state: FSMContext):
    existing_promo_codes = await rq.get_all_promo_codes()
    
    if not existing_promo_codes:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.")
        return
    
    # Format the promo codes into a readable message with the promo ID included
    promo_details = "\n".join(
        f"üÜî <b>ID:</b> <code>{promo.id}</code>\n"
        f"üìú <b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> <code>{promo.promoText}</code>\n"
        f"üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:</b> <code>{promo.activations}</code>\n"
        f"üí∏ <b>–°–∫–∏–¥–∫–∞:</b> <code>{promo.percentage}%</code>\n"
        "---------------------------"
        for promo in existing_promo_codes
    )
    
    await message.answer(f"<b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:</b>\n\n{promo_details}")



@routerAD.message(Command('addpromo'), is_admin)
async def start_adding_promo(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞:")
    await state.set_state(PromoCodeStates.waiting_for_promotext)


@routerAD.message(PromoCodeStates.waiting_for_promotext)
async def handle_promo_text(message: types.Message, state: FSMContext):
    promo_text = message.text

    existing_promo_codes = await rq.get_all_promo_codes() 
    if any(promo.promoText == promo_text for promo in existing_promo_codes):
        await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞:")
        return 

    await state.update_data(promo_text=promo_text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:")
    await state.set_state(PromoCodeStates.waiting_for_activations)


@routerAD.message(PromoCodeStates.waiting_for_activations)
async def handle_activations(message: types.Message, state: FSMContext):
    activations = message.text
    await state.update_data(activations=activations)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏:")
    await state.set_state(PromoCodeStates.waiting_for_percentage)


@routerAD.message(PromoCodeStates.waiting_for_percentage)
async def handle_percentage(message: types.Message, state: FSMContext):
    percentage = message.text
    await state.update_data(percentage=percentage)

    data = await state.get_data()
    promo_text = data.get('promo_text')
    activations = int(data.get('activations')) 
    percentage = float(data.get('percentage'))
    
    await da.add_promo_codes(promo_text, activations, percentage)
    await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.clear()


@routerAD.callback_query(F.data.startswith('delete_'), is_admin)
async def delete_item(callback: CallbackQuery):
    await callback.message.delete()
    product_id = callback.data.split("_")[-1]
    await rq.orm_delete_product(int(product_id))
    await callback.answer(f"–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –ø–æ –∞–π–¥–∏ {product_id}", show_alert=True)
    await callback.message.answer(f"–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –ø–æ –∞–π–¥–∏ {product_id}", reply_markup=ke.admin_main_key())


@routerAD.callback_query(F.data.startswith('change_'), is_admin)
async def change_product_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    product_id = callback.data.split("_")[-1]

    product_for_change = await rq.get_item(int(product_id))

    AddProduct.product_for_change = product_for_change

    await callback.answer()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(AddProduct.name)

@routerAD.message(Command('help'), is_admin)
async def help_command(message: Message):
    help_text = (
        "–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
        "/admin - –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.\n\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.\n\n"
        "/done - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑—ã.\n\n"
        "/delete_all_orders - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã.\n\n"
        "/cancel_order - –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–∫–∞–∑.\n\n"
        "/active_orders_id - –ü–æ–∫–∞–∑–∞—Ç—å ID –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã.\n\n"
        "/deletepromo - –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥.\n\n"
        "/allpromo - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã.\n\n"
        "/addpromo - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.\n\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
    )
    await message.answer(help_text)





@routerAD.message(Command('admin'), is_admin)
async def admin_features(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=ke.admin_main_key())

@routerAD.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', is_admin)
async def add_item(message: Message, state: FSMContext):
    await state.set_state(AddProduct.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=types.ReplyKeyboardRemove())

@routerAD.message(AddProduct.name, or_f(F.text, F.text == '.'), is_admin)
async def name_item(message: Message, state: FSMContext):
     
    if message.text == ".":
        await state.update_data(name=AddProduct.product_for_change.ItemName)
    else:

        if len(message.text) >= 100:
            await message.answer(
                "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤. \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ"
            )
            return
        await state.update_data(name=message.text)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddProduct.description)

@routerAD.message(AddProduct.description, or_f(F.text, F.text == '.'), is_admin)
async def description_item(message: Message, state: FSMContext):

    if message.text == ".":
        await state.update_data(description=AddProduct.product_for_change.ItemDescription)
    else:
        await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddProduct.price)

@routerAD.message(AddProduct.price, or_f(F.text, F.text == '.'), is_admin)
async def price_item(message: Message, state: FSMContext):

    if message.text == ".":
        await state.update_data(price=AddProduct.product_for_change.ItemPrice)
    else:
        try:
            float(message.text)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã")

        await state.update_data(price=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddProduct.quantity)

@routerAD.message(AddProduct.quantity, or_f(F.text, F.text == '.'), is_admin)
async def quantity_item(message: Message, state: FSMContext):

    if message.text == ".":
        await state.update_data(quantity=AddProduct.product_for_change.ItemQuantity)
    else:
        try:
            int(message.text)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")

        await state.update_data(quantity=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddProduct.image)

@routerAD.message(AddProduct.image, or_f(F.photo, F.text == '.'), is_admin)
async def image_item(message: Message, state: FSMContext):

    if message.text and message.text == ".":
        await state.update_data(image=AddProduct.product_for_change.ItemImg)
    else:
        if not message.photo:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
            return
        await state.update_data(image=str(message.photo[-1].file_id))

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º:")
    await state.set_state(AddProduct.name_uz)


@routerAD.message(AddProduct.name_uz, or_f(F.text, F.text == '.'), is_admin)
async def name_item_uz(message: Message, state: FSMContext):

    if message.text == ".":
        await state.update_data(name_uz=AddProduct.product_for_change.ItemNameUz)
    else:
        await state.update_data(name_uz=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º:")
    await state.set_state(AddProduct.description_uz)

@routerAD.message(AddProduct.description_uz, or_f(F.text, F.text == '.'), is_admin)
async def description_item_uz(message: Message, state: FSMContext):

    if message.text == ".":
        await state.update_data(description_uz=AddProduct.product_for_change.ItemDescriptionUz)
    else:
        await state.update_data(description_uz=message.text)
    data = await state.get_data()

    try:
        if AddProduct.product_for_change:
            await da.orm_update_product(AddProduct.product_for_change.Id, data)
        else:
            await da.admin_add_item(data)

        # # Add translations to the dictionary
        item_translations['uz'][data['name']] = data['name_uz']
        item_translations['uz'][data['description']] = data['description_uz']

        await message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=ke.admin_main_key())
        await state.clear()
    except Exception as e:
        await message.answer(
            f"–û—à–∏–±–∫–∞: \n{str(e)}\n–û–±—Ä–∞—Ç–∏—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ—Ä—É.",
            reply_markup=ke.admin_main_key(),
        )
        await state.clear()
    AddProduct.product_for_change = None

@routerAD.message(F.text == '–í—Å–µ —Ç–æ–≤–∞—Ä—ã', is_admin)
async def all_item(message: Message):
    items = await rq.get_items()
    if not items:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–æ–≤–∞—Ä—ã!\n\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: <b>–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</b>", reply_markup=ke.admin_main_key())
    else:
        kb = await ke.adminItems()
        await message.answer("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤:\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ:", reply_markup=kb)

        


@routerAD.message(is_admin)
async def forItems(message: Message):
    all_item_names = await allItemNamesRu()

    if message.text in all_item_names:
        item_details = await rq.getItemDetailsByName(message.text)
        if item_details:
            formatted_price = f"{item_details.ItemPrice:,.0f}"
            response = (
                f"–ê–π–¥–∏ —Ç–æ–≤–∞—Ä–∞: <b>{item_details.Id}</b>\n\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <b>{item_details.ItemName}</b>\n\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º: <b>{item_details.ItemNameUz}</b>\n\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤: <b>{item_details.ItemDescription}</b>\n\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º: <b>{item_details.ItemDescriptionUz}</b>\n\n"
                f"–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: <b>{formatted_price}</b>\n\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: <b>{item_details.ItemQuantity}</b>\n\n"
            )
            
            in_edit_or_change = await il.get_callback_btns(btns={
            '–£–¥–∞–ª–∏—Ç—å': f'delete_{item_details.Id}',
            '–ò–∑–º–µ–Ω–∏—Ç—å': f'change_{item_details.Id}'
            })
            await message.answer_photo(photo=f'{item_details.ItemImg}', caption=response, reply_markup=in_edit_or_change)
        else:
            await message.answer("Item details not found.")
    else:
        await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")